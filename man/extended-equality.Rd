% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extended-equality.R
\name{extended-equality}
\alias{extended-equality}
\alias{\%==\%}
\alias{\%in.\%}
\title{Extended equality operators}
\usage{
x \%==\% y

x \%in.\% y
}
\arguments{
\item{x}{A vector}

\item{y}{A vector for \verb{\%==\%}, a list of vectors for \verb{\%in.\%}}
}
\description{
\verb{\%==\%} is the bone operator, it works like \code{==} but \code{NA \%==\% 1} is \code{FALSE} and
\code{NA \%==\% NA} is \code{TRUE}. \verb{\%in.\%} is the a vectorized \code{\%in\%}, that
can be seen as a rowwise \code{\%in\%} when applied to data frame columns. These are
convenient helpers for fuzzy joins.
}
\examples{
df1 <- data.frame(key = c("b", "z"))
df2 <- data.frame(key1 = c("a", "b", "c"), key2 = c("x", "y", "z"), val = 1:3)
power_left_join(df1, df2, ~ .x$key \%in.\% list(.y$key1, .y$key2))

df3 <- data.frame(key1 = c("a", NA))
df4 <- data.frame(key2 = c("a", "b", NA), val = 1:3)

# note the difference
power_inner_join(df3, df4, by = ~ .x$key1 == .y$key2)
power_inner_join(df3, df4, by = ~ .x$key1 \%==\% .y$key2)

# typically we would only use the conditions above as part of more complex conditions.
# In this precise case they are equivalent to these equi joins
power_inner_join(df3, df4, by = c(key1 = "key2"))
power_inner_join(df3, df4, by = c(key1 = "key2"), na_matches = "never")
}
